package ${package};

import ${grammarEvaluator.rawName};
#foreach($type in $imports)
import $type.rawName;
#end

public class ASTEvaluator implements ${grammarEvaluator.simpleName} {
#foreach($node in $flats)
  public ${node.parent.type.simpleName} ${node.id}(#foreach($param in ${node.nodes})#if ($velocityCount!=1),#end ${param.node.type.simpleName} ${param.name}#end) {    
    return new ${node.type.simpleName}(#foreach($param in ${node.nodes})#if ($velocityCount!=1),#end ${param.name}#end);
  }
#end
#foreach($param in  $startNonTerminalParameters)
  #set($nodeName=${param.node.id})
  #if(${param.node.isSingleProduction()}) #set($nodeName=${param.node.objectId.left.id})#end
  #set($acceptName=$upperCaser.toUpperCase(${nodeName}))
  
  public ${param.node.type.simpleName} get${acceptName}() {
    return ${param.name};
  }
  
  public void accept${acceptName}(${param.node.type.simpleName} ${param.name}) {
    this.${param.name}=${param.name};
  }
#end
#foreach($param in $startNonTerminalParameters)
  private ${param.node.type.simpleName} ${param.name};
#end
}
