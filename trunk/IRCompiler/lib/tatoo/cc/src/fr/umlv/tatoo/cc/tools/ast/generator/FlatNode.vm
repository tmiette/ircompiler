package ${package};

#foreach($type in $imports)
import $type.rawName;
#end

public class ${nodeName} extends FlatNode<${elementSuperType.simpleName},${parentSuperType.simpleName},${attributeSuperType.simpleName}> implements Serializable#if(!${node.isSingleProduction()}), ${node.parent.type.simpleName}#end {
#if($node.nodes.size()!=0)
  ${nodeName}() {
    // used by XML serialization
  }
#end
  public ${nodeName}(#foreach($param in $node.nodes)#if ($velocityCount!=1), #end${param.node.type.simpleName} ${param.name}#end) {
#if($node.nodes.size()==0)
    // default constructor
#end
#foreach($param in $node.nodes)
    ${param.setter}(${param.name});
#end
  }
  
  /** 
   * {@inheritDoc}
   */
  public String getName() {
    return "${node.XMLName}";
  }
  
#foreach($param in $node.elements)
  public ${param.node.type.simpleName} ${param.getter}() {
    return ${param.name};
  }
  public void ${param.setter}(${param.node.type.simpleName} ${param.name}) {
    this.${param.name}=#if(${param.node.type}!=${node.elementSuperType}) (${param.node.type.simpleName}) #end reparent(this.${param.name},${param.name});
  }
#end
#foreach($param in $node.attributes)
  public ${param.node.type.simpleName} ${param.getter}() {
    return ${param.name};
  }
  public void ${param.setter}(${param.node.type.simpleName} ${param.name}) {
    this.${param.name}=${param.name};
  }
#end
  /** 
   * {@inheritDoc}
   */
  @Override
  protected Class<${elementSuperType.simpleName}> getElementType() {
    return ${elementSuperType.simpleName}.class;
  }
#if($node.elements.size()>0)
  /** 
   * {@inheritDoc}
   */
  @Override
  protected int nodeCount() {
    return ${node.elements.size()};
  }
  
  /** 
   * {@inheritDoc}
   */
  @Override
  protected ${elementSuperType.simpleName} nodeAt(int index) {
    switch(index) {
    #foreach($param in $node.elements)
      #set($count=${velocityCount}- 1)
      case ${count}:
        return this.${param.name};
    #end
    }
    return super.nodeAt(index);
  }
  
  /** 
   * {@inheritDoc}
   */
  @Override
  protected ${elementSuperType.simpleName} nodeAt(int index, ${elementSuperType.simpleName} node) {
    ${elementSuperType.simpleName} old;
    switch(index) {
      #foreach($param in $node.elements)
      #set($count=${velocityCount}- 1)
      case ${count}:
        old=this.${param.name};
        ${param.setter}(#if(${param.node.type}!=${elementSuperType}) (${param.node.type.simpleName})#end node);
        return old;
      #end
    }
    return super.nodeAt(index,node);
  }
#end
#if($node.attributes.size()!=0)
  /** 
   * {@inheritDoc}
   */
  @Override
  protected int attributeCount() {
    return ${node.attributes.size()};
  }
  
  /** 
   * {@inheritDoc}
   */
  @Override
  protected ${attributeSuperType.simpleName} attributeAt(int index) {
    switch(index) {
    #foreach($param in $node.attributes)
      #set($count=${velocityCount}- 1)
      case ${count}:
        return this.${param.name};
    #end
    }
    return super.attributeAt(index);
  }
  
  /** 
   * {@inheritDoc}
   */
  @Override
  @SuppressWarnings("unchecked")
  protected ${attributeSuperType.simpleName} attributeAt(int index,${attributeSuperType.simpleName} value) {
    ${attributeSuperType.simpleName} old;
    switch(index) {
      #foreach($param in $node.attributes)
      #set($count=${velocityCount}- 1)
      case ${count}:
        old=this.${param.name};
        ${param.setter}(#if(${param.node.type}!=${attributeSuperType}) (${param.node.type.simpleName})#end value);
        return old;
      #end
    }    
    return super.attributeAt(index,value);
  }
  
  /** 
   * {@inheritDoc}
   */
  @Override
  protected String attributeNameAt(int index) {
    switch(index) {
    #foreach($param in $node.attributes)
      #set($count=${velocityCount}- 1)
      case ${count}:
        return "${param.name}";
    #end
    }
    return super.attributeNameAt(index);
  }
  
  /** 
   * {@inheritDoc}
   */
  @Override
  protected Class<? extends ${attributeSuperType.simpleRawName}> attributeTypeAt(int index) {
    switch(index) {
    #foreach($param in $node.attributes)
      #set($count=${velocityCount}- 1)
      case ${count}:
        return ${param.node.type.simpleRawName}.class;
    #end
    }
    return super.attributeTypeAt(index);
  }
#end
  
  /** 
   * {@inheritDoc}
   */
  public <_R,_P,_D,_E extends Throwable> _R accept(NodeVisitor<_R,_P,_D,_E> visitor,_P param) throws _E {
    return accept((Visitor<_R,_P,_D,_E>)visitor,param);
  }
  
  public <_R,_P,_D,_E extends Throwable> _R accept(Visitor<_R,_P,_D,_E> visitor,_P param) throws _E {
    return visitor.visit(this,param);
  }
  
#foreach($param in $node.nodes)
  private ${param.node.type.simpleName} ${param.name};
#end

  private static final long serialVersionUID=${node.serialVersionUID}L;
}

