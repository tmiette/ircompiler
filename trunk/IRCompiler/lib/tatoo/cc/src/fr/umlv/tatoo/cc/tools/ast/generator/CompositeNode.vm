package ${package};

#foreach($type in $imports)
import $type.rawName;
#end

public class ${node.type.simpleName} extends CompositeNode<${elementType.simpleName},${parentSuperType.simpleName}> implements Serializable {
  public ${node.type.simpleName}() {
    // default constructor needed by XML serialization
  }

  public ${node.type.simpleName}(List<? extends ${elementType.simpleName}> list) {
    nodeList().addAll(list);
  }
  
  public ${node.type.simpleName}(${elementType.simpleName}... array) {
    Collections.addAll(nodeList(),array);
  }
  
  /** 
   * {@inheritDoc}
   */
  public String getName() {
    return "${node.id}";
  }
  
  /** 
   * {@inheritDoc}
   */
  @Override
  protected Class<${elementType.simpleName}> getElementType() {
    return ${elementType.simpleName}.class;
  }
  
  /** 
   * {@inheritDoc}
   */
  public <_R,_P,_D,_E extends Throwable> _R accept(NodeVisitor<_R,_P,_D,_E> visitor,_P param) throws _E {
    return accept((Visitor<_R,_P,_D,_E>)visitor,param);
  }
  
  public <_R,_P,_D,_E extends Throwable> _R accept(Visitor<_R,_P,_D,_E> visitor,_P param) throws _E {
    return visitor.visit(this,param);
  }

  private static final long serialVersionUID=${node.serialVersionUID}L;
}

