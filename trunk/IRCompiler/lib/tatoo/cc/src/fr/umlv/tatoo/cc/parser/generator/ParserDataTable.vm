package ${parserDataTable.packageName};

import ${nonTerminalEnum.name};
import ${productionEnum.name};
import ${terminalEnum.name};
import fr.umlv.tatoo.runtime.parser.AcceptAction;
import fr.umlv.tatoo.runtime.parser.Action;
import fr.umlv.tatoo.runtime.parser.BranchAction;
#if(${table.factory.enters.size()}>0)
import fr.umlv.tatoo.runtime.parser.EnterAction;
#end
import fr.umlv.tatoo.runtime.parser.ErrorAction;
import fr.umlv.tatoo.runtime.parser.ExitAction;
import fr.umlv.tatoo.runtime.parser.ParserTable;
import fr.umlv.tatoo.runtime.parser.ReduceAction;
import fr.umlv.tatoo.runtime.parser.ShiftAction;
#if(${table.factory.versioneds.size()}>0)
import fr.umlv.tatoo.runtime.parser.VersionedAction;
#end
import fr.umlv.tatoo.runtime.parser.StateMetadata;
import java.util.EnumMap;
#if(${table.factory.versioneds.size()}>0)
import java.util.EnumSet;
#end

/** 
 *  This class is generated - please do not edit it 
 */
public class ${parserDataTable.simpleName} {
  @SuppressWarnings("unchecked")
  private ${parserDataTable.simpleName}() {
    accept = AcceptAction.<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}>getInstance();
    exit = ExitAction.<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}>getInstance();
#foreach ($entry in $table.gotoes.entrySet())
    init${entry.key.id}Gotoes();
#end
#foreach ($reduce in $table.factory.reduces)
    ${reduce.id} = new ReduceAction<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}>(${productionEnum.simpleName}.${reduce.production.id},${reduce.production.right.size()},${reduce.production.left}Gotoes);
#end
#foreach ($shift in $table.factory.shifts)
    ${shift.id} = new ShiftAction<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}>(${shift.state.stateNo});
#end
#foreach ($enter in $table.factory.enters)
    ${enter.id} = new EnterAction<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}>(${terminalEnum.simpleName}.${enter.branchingTerminal.id},${enter.state.stateNo});
#end
#foreach ($error in $table.factory.errors)
    ${error.id} = new ErrorAction<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}>("${error.message}");
#end
#foreach ($error in $table.factory.branchs)
    ${error.id} = new BranchAction<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}>("${error.message}");
#end
#foreach ($versioned in $table.factory.versioneds)
    EnumMap<${versionEnum.simpleName},Action<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}>> ${versioned.id}Map=
      new EnumMap<${versionEnum.simpleName},Action<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}>>(${versionEnum.simpleName}.class);
#foreach ($entry in ${versioned.actionMap.entrySet()})
    ${versioned.id}Map.put(${versionEnum.simpleName}.${entry.key.id},${entry.value.id});
#end    
    ${versioned.id}=new VersionedAction<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}>(${versioned.id}Map);
#end
#foreach ($entry in $table.actionMap.entrySet()) 
    init${entry.key.id}Array();
#end
    EnumMap<${terminalEnum.simpleName},Action<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}>[]> tableMap =
      new EnumMap<${terminalEnum.simpleName},Action<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}>[]>(${terminalEnum.simpleName}.class);

#foreach ($entry in $table.actionMap.entrySet()) 
    tableMap.put(${terminalEnum.simpleName}.${entry.key.id},${entry.key.id}Array);
#end

    initBranchArrayTable();

#foreach($metadata in $metadataSet)
#if($metadata.fullversion)
    StateMetadata<${terminalEnum.simpleName},${nonTerminalEnum.simpleName},${versionEnum.simpleName}> $metadata.id = StateMetadata.<${terminalEnum.simpleName},${nonTerminalEnum.simpleName},${versionEnum.simpleName}>createAllVersionWith#if(!$metadata.associated.terminal)Non#end#**#Terminal(#if(!$metadata.associated)null#else#if($metadata.associated.terminal)${terminalEnum.simpleName}#else${nonTerminalEnum.simpleName}#end.${metadata.associated.id}#end);
#else
    StateMetadata<${terminalEnum.simpleName},${nonTerminalEnum.simpleName},${versionEnum.simpleName}> $metadata.id = StateMetadata.<${terminalEnum.simpleName},${nonTerminalEnum.simpleName},${versionEnum.simpleName}>createWith#if(!$metadata.associated.terminal)Non#end#**#Terminal(EnumSet.of(#foreach($v in $metadata.compatibleVersions)#if($velocityCount!=1), #end${versionEnum.simpleName}.$v.id),#if(!$metadata.associated)null#else#if($metadata.associated.terminal)${terminalEnum.simpleName}#else${nonTerminalEnum.simpleName}#end.${metadata.associated.id}#end);
#end
#end
#end

    StateMetadata<${terminalEnum.simpleName},${nonTerminalEnum.simpleName},${versionEnum.simpleName}>[] tableMetadata = (StateMetadata<${terminalEnum.simpleName},${nonTerminalEnum.simpleName},${versionEnum.simpleName}>[])new StateMetadata<?,?,?>[]{#foreach($metadata in $table.metadata)#if($velocityCount!=1), #end$metadata.id#end};
    
    EnumMap<${nonTerminalEnum.simpleName},Integer> tableStarts =
      new EnumMap<${nonTerminalEnum.simpleName},Integer>(${nonTerminalEnum.simpleName}.class);
#foreach ($v in $table.startStateMap.entrySet())
    tableStarts.put(${nonTerminalEnum.simpleName}.${v.key.id},${v.value});
#end
    table = new ParserTable<${terminalEnum.simpleName},${nonTerminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}>(tableMap,branchArrayTable,tableMetadata,tableStarts,${versionEnum.simpleName}.values(),${table.stateCount},${terminalEnum.simpleName}.${table.eof.id},#if ($table.error)${terminalEnum.simpleName}.${table.error.id}#else null#end);
  } 
  
#foreach ($entry in $table.gotoes.entrySet())

  private int[] ${entry.key.id}Gotoes;

  private void init${entry.key.id}Gotoes() {
    ${entry.key.id}Gotoes = 
      new int[]{#foreach ($v in $entry.value)#if ($velocityCount!=1), #end${v}#end};
  }
#end 

#foreach ($entry in $table.actionMap.entrySet())
  private Action<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}>[] ${entry.key.id}Array;
  @SuppressWarnings("unchecked")
  private void init${entry.key.id}Array() {
    ${entry.key.id}Array=(Action<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}>[])new Action<?,?,?>[]{#foreach ($v in $entry.value)#if ($velocityCount!=1), #end${v.id}#end};
  }
#end

  private Action<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}>[] branchArrayTable;
  @SuppressWarnings("unchecked")
  private void initBranchArrayTable() {
    branchArrayTable=(Action<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}>[])new Action<?,?,?>[]{#foreach ($v in ${table.branchArray})#if ($velocityCount!=1), #end${v.id}#end};
  }

  private final ParserTable<${terminalEnum.simpleName},${nonTerminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}> table;
  
  public static final ParserTable<${terminalEnum.simpleName},${nonTerminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}> createTable() {
    return new ${parserDataTable.simpleName}().table;
  }

  private final AcceptAction<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}> accept;
  private final ExitAction<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}> exit;

#foreach ($reduce in $table.factory.reduces)
  private final ReduceAction<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}> ${reduce.id};
#end

#foreach ($shift in $table.factory.shifts)
  private final ShiftAction<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}> ${shift.id};
#end

#foreach ($enter in $table.factory.enters)
  private final EnterAction<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}> ${enter.id};
#end

#foreach ($error in $table.factory.errors)
  private final ErrorAction<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}> ${error.id};
#end

#foreach ($error in $table.factory.branchs)
  private final BranchAction<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}> ${error.id};
#end

#foreach ($versioned in $table.factory.versioneds)
  private final VersionedAction<${terminalEnum.simpleName},${productionEnum.simpleName},${versionEnum.simpleName}> ${versioned.id};
#end
}
