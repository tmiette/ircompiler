package ${terminalRulesMap.packageName};

import ${ruleEnum.name};
import ${terminalEnum.name};
import ${versionEnum.name};
import fr.umlv.tatoo.runtime.parser.Parser;
import fr.umlv.tatoo.runtime.tools.EnumParserLookaheadActivator;
import java.util.EnumMap;
import java.util.EnumSet;
#macro (enumSet $value)#if ($value && $value.size()!=0)EnumSet.of(#foreach($rule in $value)#if ($velocityCount!=1), #end${ruleEnum.simpleName}.${rule.id}#end)#else EnumSet.noneOf(${ruleEnum.simpleName}.class)#end#end

/** 
 *  This class is generated - please do not edit it 
 */
public class ${terminalRulesMap.simpleName} {
  public static EnumMap<${terminalEnum.simpleName},EnumSet<${ruleEnum.simpleName}>> getTerminalRulesMap() {
    EnumMap<${terminalEnum.simpleName},EnumSet<${ruleEnum.simpleName}>> map=new EnumMap<${terminalEnum.simpleName},EnumSet<${ruleEnum.simpleName}>>(${terminalEnum.simpleName}.class);
#foreach($entry in $terminalRules.entrySet())
#if ($entry.key)
    map.put(${terminalEnum.simpleName}.${entry.key.id},#enumSet($entry.value));
#end
#end
    return map;
  }

  public static EnumSet<${ruleEnum.simpleName}> getUnconditionalRules() {
    return  #enumSet($unconditionalRules);
  }

  public static EnumParserLookaheadActivator<${ruleEnum.simpleName},${terminalEnum.simpleName},${versionEnum.simpleName}> getActivator(Parser<${terminalEnum.simpleName},?,?,${versionEnum.simpleName}> parser) {
    return new EnumParserLookaheadActivator<${ruleEnum.simpleName},${terminalEnum.simpleName},${versionEnum.simpleName}>(
      parser,getTerminalRulesMap(),${ruleEnum.simpleName}.class,getUnconditionalRules());
  }
}
