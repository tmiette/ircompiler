<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="fr">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../../../tatoo.css" rel="stylesheet"/>
  <title>Les enveloppes de texte</title>
 </head>
 <body><h1>Les enveloppes de texte</h1>
  
  <p>Pour pouvoir être analyser avec Tatoo, un texte doit être enveloppé
   par un objet qui implante l'interface 
   <tt><a href="../../../api/fr/umlv/tatoo/runtime/buffer/LexerBuffer.html">
   LexerBuffer</a></tt>. La création de cette enveloppe peut être réalisée de façon transparente 
   pour le développeur par l'objet <a href="../lexer/lexer-main.xhtml#LexerBuilder"><i>builder</i></a> de l'analyseur lexical, 
   mais il peut aussi être réalisé par le développeur, par exemple si celui-ci souhaite 
   que le même texte soit passé à plusieurs analyseurs sans reconstruire l'objet enveloppe.</p>
  <h2>Les enveloppes standards</h2>
  <p>
   Il existe un ensemble de classes enveloppes <tt>*Wrapper</tt> pour les classes standards permettant de récupérer des caractères, 
   <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/io/InputStream.html?is-external=true"><tt>InputStream</tt></a>,
   <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/io/Reader.html?is-external=true"><tt>Reader</tt></a>,
   <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/CharSequence.html?is-external=true"><tt>CharSequence</tt></a>, 
   <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/nio/channels/ReadableByteChannel.html?is-external=true"><tt>ReadableByteChannel</tt></a>,
   <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/nio/ByteBuffer.html?is-external=true"><tt>ByteBuffer</tt></a>,
   <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/nio/CharBuffer.html?is-external=true"> <tt>CharBuffer</tt></a> ou
   <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Readable.html?is-external=true"><tt>Readable</tt></a>.
   
   Par exemple la classe
    <tt><a href="../../../api/fr/umlv/tatoo/runtime/buffer/impl/ReaderWrapper.html">
   ReaderWrapper</a></tt> permet d'envelopper un objet implantant l'interface <tt><a
    href="http://java.sun.com/j2se/1.5.0/docs/api/java/io/Reader.html">
   Reader</a></tt> pour le passer à l'analyseur lexical. La classe <tt><a
    href="../../../api/fr/umlv/tatoo/runtime/buffer/impl/CharBufferWrapper.html">
   CharBufferWrapper</a></tt> permet, quand à elle, d'envelopper un objet implantant
   l'interface <tt><a
    href="http://java.sun.com/j2se/1.5.0/docs/api/java/nio/CharBuffer.html">
   CharBuffer</a></tt>.</p>
  <p>Par exemple, la portion de code suivante construit une enveloppe pour le fichier
   <tt>calc-test.txt</tt>&nbsp;:</p>
  
  <pre>ReaderWrapper buffer = new ReaderWrapper(new FileReader("calc-test.test"));</pre>
  
  <h2 id="location">Les enveloppes de localisation</h2>
  <p>Les classes enveloppes standards, comme <a
    href="../../../api/fr/umlv/tatoo/runtime/buffer/impl/ReaderWrapper.html"><tt>ReaderWrapper</tt></a> et 
  <a href="../../../api/fr/umlv/tatoo/runtime/buffer/impl/CharBufferWrapper.html"><tt>CharBufferWrapper</tt></a>,
  ne permettent pas la localisation dans le texte analysé, en particulier pour les erreurs. Pour la permettre, 
   il suffit d'envelopper les objets de ces classes avec la classe 
   <a href="../../../api/fr/umlv/tatoo/runtime/buffer/impl/LocationBufferFilter.html"><tt>LocationBufferFilter</tt></a> 
   au moyen d'une de ses méthodes statiques 
   <a href="../../../api/fr/umlv/tatoo/runtime/buffer/impl/LocationBufferFilter.html#wrapBuffer(B)"><tt>wrapBuffer()</tt></a>
   ou <a href="../../../api/fr/umlv/tatoo/runtime/buffer/impl/LocationBufferFilter.html#wrapTokenBuffer(B)"><tt>wrapTokenBuffer()</tt></a>.
   Ceci peut être fait de façon automatique, si l'on utilise un <a href="../lexer/lexer-main.xhtml#LexerBuilder"><i>builder</i></a> de 
   type <a href="../../../api/fr/umlv/tatoo/runtime/tools/builder/LexerLocationBuilder.html"><tt>LexerLocationBuilder</tt></a>, mais peut
   aussi être réalisé par le développeur lui-même. 
  </p>
<pre><![CDATA[LocationTokenBufferFilter<ReaderWrapper,CharSequence> locationBuffer =  LocationBufferFilter.wrapTokenBuffer(buffer);]]></pre>
  <p><a href = "javascript:history.back()">Back</a></p>
</body>
</html>