<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="fr">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../../../tatoo.css" rel="stylesheet"/>
  <title>Génération des fichiers de liaison</title>
 </head>
 <body>
  <h1>Génération des fichiers de liaison</h1>
  <p>Pour générer les classes de lien il y a, comme pour les analyseurs lexical et syntaxique, deux possibilités&nbsp;: 
   utiliser <a href="#ant">une tâche <tt>ant</tt></a> ou compiler le fichier en <a href="#command">ligne de commande</a>.  Ces deux
   possibilités reposent sur la disponibilité du fichier Jar&nbsp;: <a href="../../../../files/tatoo.jar"><tt>tatoo.jar</tt></a>. Par défaut, elles produisent
   dans le répertoire courant&nbsp;:</p>
  <ul>
   <li>deux interfaces&nbsp;
    <ul>
     <li><tt>tools.TerminalAttributeEvaluator&lt;D&gt;</tt> pour calculer la valeur des attributs associés au 
      terminaux de la grammaires à partir des lexèmes reconnus&nbsp;;</li>
     <li><tt>tools.GrammarEvaluator</tt> pour implanter la sémantique de l'analyseur&nbsp;;</li>
    </ul>
   </li>
   <li>et quatre classes&nbsp;;
    <ul>
     <li><tt>tools.ToolsLexerProcessor&lt;D&gt;</tt> qui chaque fois qu'un lexème est reconnu transmet le terminal
      correspondant à l'analyseur syntaxique en ayant préalablement calculé l'attribut associé&nbsp;;</li>
     <li><tt>tools.ToolsParserProcessor</tt> qui appelle l'évaluateur sémantique chaque fois 
      qu'une production est reconnue&nbsp;;</li>
     <li><tt>tools.TerminalRulesMap</tt> qui associe à chaque terminal les règles lui correspondant&nbsp;;</li>
     <li><tt>tools.Analyzer</tt> qui implante un analyseur complet simple dont la sémantique se contente
      d'effectuer des affichages.</li>
    </ul>
   </li>
  </ul>
  <p>En plus du fichier <tt>.xtls</tt>, il est nécessaire de préciser les noms 
   des fichiers <tt>.xlex</tt> et <tt>.xpars</tt> à utiliser. Par défaut, les classes associées 
   aux analyseurs ne sont pas générées, mais il est possible de demander leur génération.</p>
  <h3>Un exemple complet</h3>
  <pre><![CDATA[<?xml version="1.0"?>
<project name="calc" default="all" basedir=".">

 <property name="tatoo.dir" location="../.."/>
 <property name="tatoo.jar" location="${tatoo.dir}/tatoo.jar"/>
 <property name="tatoo-runtime.jar" location="${tatoo.dir}/tatoo-runtime.jar"/>
	
 <property name="src" value="src"/>
 <property name="gen-src" value="gen-src"/>

 <property name="lexer.file" value="calc.xlex"/>
 <property name="parser.file" value="calc.xpars"/>
 <property name="tools.file" value="calc.xtls"/> 

 <property name="lexer.package" value="fr.umlv.tatoo.samples.tutorial.lexer"/>
 <property name="parser.package" value="fr.umlv.tatoo.samples.tutorial.parser"/>
 <property name="tools.package" value="fr.umlv.tatoo.samples.tutorial.tools"/>
 
 <property name="validating" value="true"/>
 
 <taskdef name="lexer" classname="fr.umlv.tatoo.cc.lexer.main.LexerTask" classpath="${tatoo.jar}"/>
 <taskdef name="parser" classname="fr.umlv.tatoo.cc.parser.main.ParserTask" classpath="${tatoo.jar}"/>
 <taskdef name="tools" classname="fr.umlv.tatoo.cc.tools.main.ToolsTask" classpath="${tatoo.jar}"/>
  
 <target name="lexer">
  <lexer destination="${gen-src}" lexerFile="${lexer.file}" validating="${validating}">
   <package lexer="${lexer.package}"/>
  </lexer>
 </target>

 <target name="parser">
  <parser destination="${gen-src}" parserFile="${parser.file}" parsertype="lalr" validating="${validating}">
   <package parser="${parser.package}"/>
  </parser>
 </target>
	
 <target name="tools">
  <tools destination="${gen-src}" lexerFile="${lexer.file}" 
         parserFile="${parser.file}" toolsFile="${tools.file}" validating="${validating}">
   <package lexer="${lexer.package}"/>
   <package parser="${parser.package}"/>
   <package tools="${tools.package}"/>
  </tools>
 </target>

 <target name="all" depends="lexer,parser,tools"/>

</project>]]></pre>

  <p><a href="javascript:history.back()">Back</a>  </p>
  
  <h2 id="ant">Compilation par une tâche <tt>ant</tt></h2>
  <p>La tâche <tt>fr.umlv.tatoo.cc.tools.main.ToolsTask</tt> qui se trouve dans le Jar 
    <tt><a href="../../../../files/tatoo.jar">tatoo.jar</a></tt> permet de générer l'implantation 
    de classes de liaison entre les analyseurs lexical et syntaxique et la sémantique.</p>
  <pre><![CDATA[<taskdef name="tools" classname="fr.umlv.tatoo.cc.tools.main.ToolsTask" classpath="tatoo.jar:velocity-dep.jar"/>]]></pre>
  <p>Cette tâche permet de construire les classes de liaison. Ses attributs sont&nbsp;:</p>
  <ul>
   <li><tt>lexerFile</tt> qui précise le fichier <tt>.xlex</tt> à utiliser&nbsp;;</li>
   <li><tt>parserFile</tt> qui précise le fichier <tt>.xpars</tt> à utiliser&nbsp;;</li>
   <li><tt>toolsFile</tt> qui précise le fichier <tt>.xtls</tt> à utiliser&nbsp;;</li>
   <li><tt>destination</tt> qui précise le répertoire dans lequel placer les fichiers générés&nbsp;;</li>
	  <li><tt>packagePrefix</tt> qui précise le préfixe à ajouter aux paquetages <tt>lexer</tt>, <tt>parser</tt>
     et <tt>tools</tt>  des fichiers générés&nbsp;;</li>
   <li><tt>validating</tt> qui précise si l'analyseur XML doit valider le fichier <tt>.xlex</tt> en fonction
   de sa DTD.</li>
  </ul>
  <p>D'autre part, il existe des <a href="../ant/internal.xhtml">éléments internes</a> communs aux autres 
   tâches <tt>ant</tt> de Tatoo qui permettent de changer précisément le comportement de la tâche. En particulier,
   l'élément <tt>filealias</tt> permet de demander la génération des classes des analyseurs qui 
   ne le sont pas par défaut.</p>
  <p>Par exemple, la tâche suivante génère, à partir des informations des fichiers <a
    href="../../../../../samples/tutorial/calc.xtls"><tt>calc.xtls</tt></a>, <a
    href="../../../../../samples/tutorial/calc.xlex"><tt>calc.xlex</tt></a> et <a
    href="../../../../../samples/tutorial/calc.xpars"><tt>calc.xpars</tt></a>, les les fichiers de liaison et les place
   dans le paquetage <tt>fr.umlv.tatoo.samples.tutorial.tools</tt>. Les fichiers sont générés
   dans le répertoire <tt>gen-src</tt> du répertoire courant et le fichier <tt>.xtls</tt> est validé avec sa DTD.</p>
  
<pre><![CDATA[ <target name="tools">
  <tools destination="./gen-src/" lexerFile="calc.xlex" parserFile="calc.xpars" toolsFile="calc.xtls" validating="true">
   <filealias type="GrammarEvaluator" name="GrammarEvaluator" generate="true"/>
   <package tools="fr.umlv.tatoo.samples.tutorial.tools"/>
   <package lexer="fr.umlv.tatoo.samples.tutorial.lexer"/>
   <package parser="fr.umlv.tatoo.samples.tutorial.parser"/>
  </tools>
 </target>]]>
</pre>
   <p><a href="javascript:history.back()">Back</a></p>
  
   <h2 id="command">Compilation en ligne de commande</h2>
   <p>En plus du fichier <tt>xtls</tt>, il est nécessaire de préciser sur la ligne de commande les noms 
   des fichiers <tt>.xlex</tt> et <tt>.xpars</tt> à utiliser. Par défaut, les classes associées 
   aux analyseurs ne sont pas générées, mais il est possible de demander leur génération avec les options <tt>-g lexer</tt> et <tt>-g parser</tt>.
   Cette option vient ajouter aux autres <a href="../lexer/compile.xhtml#tatoo-options">options</a> communes avec celles 
    des analyseurs. </p>
<p>Par exemple, la commande suivante génère, à partir des informations des fichiers <a
    href="../../../../../samples/tutorial/calc.xtls"><tt>calc.xtls</tt></a>, <a
    href="../../../../../samples/tutorial/calc.xlex"><tt>calc.xlex</tt></a> et <a
    href="../../../../../samples/tutorial/calc.xpars"><tt>calc.xpars</tt></a>, les les fichiers de liaison et les place
   dans le paquetage <tt>fr.umlv.tatoo.samples.tutorial.tools</tt>. Les fichiers sont générés
   dans le répertoire <tt>gen-src</tt> du répertoire courant et le fichier <tt>.xtls</tt> est validé avec sa DTD.</p>
  
  <pre><![CDATA[java -jar tatoo.jar -d ./gen-src/ -p fr.umlv.tatoo.samples.tutorial calc.xlex calc.xpars calc.xtls]]></pre>
  <p><a href="javascript:history.back()">Back</a></p>
 </body>
</html>