<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="fr">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../../../tatoo.css" rel="stylesheet"/>
  <title>Générer les classes de l'analyseur syntaxique</title>
 </head>
 <body>
  <h1>Générer les classes de l'analyseur syntaxique</h1>
  <p>Pour générer les classes de l'analyseur syntaxique il y a, comme pour l'analyseur lexical, deux possibilités&nbsp;: utiliser <a href="#ant">une tâche 
   <tt>ant</tt></a> ou compiler le fichier en <a href="#command">ligne de commande</a>.  Ces deux
   possibilités reposent sur la disponibilité du fichier Jar&nbsp;: <a href="../../../../files/tatoo.jar"><tt>tatoo.jar</tt></a>. Par défaut, elles produisent
   dans le répertoire courant&nbsp;:</p>
  <ul>
   <li>quatre énumérations&nbsp;:
   <ul>
    <li><tt>parser.TerminalEnum</tt> pour les terminaux de la grammaire&nbsp;;</li>
    <li><tt>parser.NonTerminalEnum</tt> pour les non-terminaux de la grammaire&nbsp;;</li>
    <li><tt>parser.ProductionEnum</tt> pour les productions de la grammaire&nbsp;;</li>
    <li><tt>parser.VersionEnum</tt> pour les versions des productions de la grammaire&nbsp;;</li>
    </ul>
   </li>
   <li>une classe <tt>parser.ParserDataTable</tt> pour la table de l'automate à pile.</li>
  </ul>
   <p><a href = "javascript:history.back()">Back</a>  </p>
   <h2 id="ant">Compilation par une tâche <tt>ant</tt></h2>
  <p>La tâche <tt>fr.umlv.tatoo.cc.parser.main.ParserTask</tt> qui se trouve dans le Jar 
    <tt><a href="../../../../files/tatoo.jar">tatoo.jar</a></tt> permet de générer l'implantation 
    de l'automate à pile qui correspond à une grammaire.</p>
  <p>Dans le fichier <tt>build.xml</tt> cette tâche est définie comme suit&nbsp;:</p>
  <pre><![CDATA[<taskdef name="parser" classname="fr.umlv.tatoo.cc.parser.main.ParserTask" classpath="tatoo.jar:velocity-dep.jar"/>]]></pre>
  <p>Cette tâche permet de construire les classes de l'analyseur syntaxique. Ses attributs sont&nbsp;:</p>
  <ul>
   <li><tt>parserFile</tt> qui précise le fichier <tt>.xpars</tt> à utiliser&nbsp;;</li>
   <li><tt>parserType</tt> qui précise le type de la table construite (<tt>slr</tt>, <tt>lr</tt> ou <tt>lalr</tt>)</li>
   <li><tt>destination</tt> qui précise le répertoire dans lequel placer les fichiers générés&nbsp;;</li>
	  <li><tt>packagePrefix</tt> qui précise le préfixe à ajouter au paquetage <tt>parser</tt> des fichiers générés&nbsp;;</li>
   <li><tt>validating</tt> qui précise si l'analyseur XML doit valider le fichier <tt>.xpars</tt> en fonction
   de sa DTD&nbsp;;</li>
   <li><tt>logFile</tt> qui précise un nom de fichier dans lequel placé une version lisible
   des tables de l'analyseur syntaxique.</li>
  </ul>
    <p>D'autre part, il existe des <a href="../ant/internal.xhtml">éléments internes</a> communs aux autres 
   tâches <tt>ant</tt> de Tatoo qui permettent de changer précisément le comportement de la tâche.</p>
  <p>Par exemple, la tâche suivante génère, à partir de la grammaire décrite dans le fichier <a
    href="../../../../samples/tutorial/calc.xpars"><tt>calc.xpars</tt></a> l'implantation l'automate à pile LALR et le place
   dans le paquetage <tt>fr.umlv.tatoo.samples.tutorial.parser</tt>. Les fichiers sont générés
   dans le répertoire <tt>gen-src</tt> du répertoire courant et le fichier <tt>.xpars</tt> est validé avec sa DTD.</p>
  <pre><![CDATA[ <target name="parser">
  <parser destination="./gen-src/" parserFile="calc.xpars" parsertype="lalr" validating="true">
   <package parser="fr.umlv.tatoo.samples.tutorial.parser"/>
  </parser>
 </target>]]></pre>
  <h3>Un exemple complet</h3>
  <pre><![CDATA[ <?xml version="1.0"?>
 <project name="tatoo" default="parser" basedir=".">
  <taskdef name="parser" classname="fr.umlv.tatoo.cc.parser.main.ParserTask" classpath="tatoo.jar:velocity-dep.jar"/>  
  <target name="parser">
   <parser destination="./gen-src/" parserFile="calc.xpars" logfile="log.xml" parsertype="lalr" validating="true">
    <package parser="fr.umlv.tatoo.samples.tutorial.parser"/>
   </parser>
  </target>
 </project>]]></pre>

  <p><a href = "javascript:history.back()">Back</a>  </p>

   <h2 id="command">Compilation en ligne de commande</h2>
   <p>En plus des
   options vues lors de la <a href="../lexer/compile.xhtml#tatoo-options">génération des classes de l'analyseur lexical</a>, on 
   trouve des options spécifiques à la générations de classes de l'analyseur syntaxique&nbsp;:  
  </p>
  
  <ul>
   <li><tt>-t (slr|lr|lalr)</tt> qui précise le type de la table construite par Tatoo,
    SLR, LR(1) ou LALR(1) (SLR par défaut)&nbsp;;</li>
   <li><tt>-l <i>file</i></tt> qui précise que les tables doivent être écrites en format textuel dans le fichier 
   <tt><i>file</i></tt>.</li>
  </ul>
<p>Par exemple, la commande suivante génère, à partir de la grammaire décrite dans le fichier <a
    href="../../../../samples/tutorial/calc.xpars"><tt>calc.xpars</tt></a> l'implantation l'automate à pile LALR et le place
   dans le paquetage <tt>fr.umlv.tatoo.samples.tutorial.parser</tt>. Les fichiers sont générés
   dans le répertoire <tt>gen-src</tt> du répertoire courant et le fichier <tt>.xpars</tt> est validé avec sa DTD.</p>
  <pre>java -jar tatoo.jar -t lalr -d ./gen-src/ -p:parser fr.umlv.tatoo.samples.tutorial.parser calc.xpars</pre>
 <p><a href = "javascript:history.back()">Back</a></p>
 </body>
</html>
