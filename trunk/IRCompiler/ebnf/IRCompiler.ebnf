imports:

priorities:
  not = 3 nonassoc
  star_slash = 2 left
  plus_minus = 1 left
  equal = 0 nonassoc
  
tokens: 
  $white = '[ \t\n\r]'

  dot_ = '\.'
  semicolon_ = ';'
  lpar_ = '\('
  rpar_ = '\)'
  comma_ = ','
  plus_ = '\+' [plus_minus]
  minus_ = '-' [plus_minus]
  mult_ = '\*' [star_slash]
  div_ = '\/' [star_slash]
  equal_ = '==' [equal]
  inequal_ = '!=' [equal]
  affect_ = '=' [equal]
  
  import_ = 'import'
  function_ = 'function'
  end_function_ = 'end'
  if_ = 'if'
  then_ = 'then'
  else_ = 'else'
  fi_ = 'fi'
  return_ = 'return'
  not_ = 'not' [not]
  print_ = 'print'
  
  integer_type_ = 'int'
  boolean_type_ = 'bool'
  comment_ = '#[^\n\r]*\r?\n'
  
  identifier_:String = '[a-zA-Z$_][a-zA-Z0-9$_]*'
  number_:Integer = '[0-9]+'
  boolean_:Boolean = 'true|false'

blanks:
  blk_ = "{white}"

starts:
  start

productions:
  start = 
  		import_statement* instruction* {start}
        ;
        
  import_statement = 
  		'import_' package_name 'semicolon_' {import_statement}
  		;
  		
  package_name = 
  		'identifier_' {single_package_name}
  		| package_name 'dot_' 'identifier_' {multiple_package_name}
  		;
  
  instruction = 
		function_declaration {instruction}
		| statement {statement}
  		;
  		
  function_declaration = 
  		'function_' type 'identifier_' 'lpar_' parameter_list 'rpar_' multiple_statement 'end_function_' {function_declaration}
  		;
  
  parameter_list = 
  		{empty_parameter_list}
  		| parameter another_parameter* {parameter_list}
		;

  parameter = 
		type 'identifier_' {parameter}
  		;
  
  another_parameter = 
  		'comma_' parameter {another_parameter}
  		;
  
  multiple_statement =
  		statement* {multiple_statement}
  		;
  
  statement = 
  		variable_declaration {variable_declaration_statement}
  		| 'comment_' {comment_statement}
  		| 'print_' expression 'semicolon_' {print_statement}
  		| expression 'semicolon_' {expression_statement}
  		| 'return_' expression 'semicolon_' {return_statement}
  		| 'if_' expression 'then_' multiple_statement else_statement 'fi_' {conditional_statement}
  		| 'semicolon_' {empty_statement}
		;
		
  else_statement =
  		{empty_else_statement}
  		| 'else_' multiple_statement {else_statement}
  		;
		
  variable_declaration =
  		type variable_declarator 'semicolon_' {variable_declaration}
  		;
  
  variable_declarator =
  		'identifier_' 'affect_' expression {variable_declarator}
  		;
		
  expression =
  		expression 'plus_' expression [plus_minus] {plus_expression}
  		| expression 'minus_' expression [plus_minus] {minus_expression}
  		| expression 'mult_' expression [star_slash] {mult_expression}
  		| expression 'div_' expression [star_slash] {div_expression}
  		| 'not_' expression [not] {not_expression}
  		| 'minus_' expression [plus_minus] {minus_simple_expression}
  		| expression 'equal_' expression [equal] {equal_expression}
  		| expression 'inequal_' expression [equal] {inequal_expression}
  		| expression 'affect_' expression [equal] {affect_expression}
		| 'lpar_' expression 'rpar_' {par_expression}
		| 'identifier_' 'lpar_' arg_list 'rpar_' {function_call_expression}
  		| 'identifier_' 'dot_' 'identifier_' 'lpar_' arg_list 'rpar_' {method_call_expression}
  		| 'identifier_' {identifier_expression}
  		| 'number_' {number_expression}
  		| 'boolean_' {boolean_expression}
  		;
  		
  arg_list =
  		{empty_arg_list}
		| expression another_arg* {args_list}
		;
  
  another_arg =
  		'comma_' expression {another_arg}
  		;
  
  type = 
  		'integer_type_' {integer_type}
  		| 'boolean_type_' {boolean_type}
  		| 'identifier_' {class_type}
  		;
